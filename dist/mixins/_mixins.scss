//cross browser
@mixin placeholder() {
    ::-webkit-input-placeholder {
        @content;
    }
    :-moz-placeholder {
        @content;
    }
    ::-moz-placeholder {
        @content;
    }
    :-ms-input-placeholder {
        @content;
    }
}

//retina
/* full background image with retina */
@mixin background-image-url-retina($imagePathWithoutExtension) {
    /*CSS for basic styling and non-retina image path:*/
    background: {
        image: url('#{$imagePathWithoutExtension}.png');
    }

    /*CSS for serving the retina image to devices with a high "device-pixel-ratio":*/
    @media only screen and (min-resolution: 1.5dppx) {
        background: {
            image: url('#{$imagePathWithoutExtension}@2x.png');
        }
    }
}

//components
@mixin cloud-arrow($direction: up,$size: 10px,$color: white) {
    content: '';
    border: $size solid transparent;
    @if $direction == up {
        border-bottom-color: $color;
    }
    @if $direction == right {
        border-left-color: $color;
    }
    @if $direction == bottom {
        border-top-color: $color;
    }
    @if $direction == left {
        border-right-color: $color;
    }
    position: absolute;
    top: -20px;
    @content;
}

@mixin double-cloud-arrow($direction: up,$size: 10px,$inner-color: $whiteBC1,$outerColor: rgba(95, 84, 60, 0.18)) {
    &:before {
        @include cloud-arrow($direction, $size + 1px, $outerColor);
    }

    &:after {
        @include cloud-arrow($direction, $size, $inner-color) {
            left: 1px;
            top: -18px;
        }
    }
}

//useful mixins
@mixin background-cover-image($imagePathWithoutExtension){
    @include background-image-url-retina($imagePathWithoutExtension);
    background:{
        position: center;
        size: cover;
        attachment: fixed;
        repeat: no-repeat;
    }
}

//shortcuts
//@deprecated use absolute-position/absolute-full-cover instead
@mixin full-pos($top:0,$right:0,$bottom:0,$left:0) {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin absolute-position($top: null, $right: null, $bottom: null, $left: null) {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}
@mixin misc-pos($typePos:absolute,$top:null,$right:null,$bottom:null,$left:null) {
    position: $typePos;
    @include full-pos($top,$right,$bottom,$left);
}

@mixin absolute-full-cover {
    @include absolute-position(0, 0, 0, 0);
}

@mixin dimension($width,$height: null) {
    width: $width;

    @if $height == null {
        height: $width;
    } @else {
        height: $height;
    }
}
@mixin dimension-max-min($width,$height: null,$maxwidth: null,$maxheight: null,$minwidth: null,$minheight: null) {
    @include dimension($width, $height);
    @if($maxwidth)
    {
        max-width: $maxwidth;
    }
    @if($maxheight)
    {
        max-height: $maxheight;
    }
    @if($minwidth)
    {
        min-width: $minwidth;
    }
    @if($minheight)
    {
        min-height: $minheight;
    }
}

@mixin text-style($size: null,$color: null,$family: null,$weight: null,$letter-spacing:null,$text-transform: null, $style: null, $align: null) {
    @if ($size) {
        font-size: $size;
    }

    @if ($color) {
        color: $color;
    }

    @if ($family) {
        font-family: $family;
    }

    @if $weight {
        font-weight: $weight;
    }

    @if $letter-spacing {
        letter-spacing: $letter-spacing;
    }

    @if $text-transform {
        text-transform: $text-transform;
    }

    @if $style {
        font-style: $style;
    }
    @if $align {
        text-align: $align;
    }

}

@mixin responsive($max-width) {
    @media (max-width: $max-width) {
        @content;
    }
}

@mixin responsive-min-width($min-width) {
    @media (min-width: $min-width) {
        @content;
    }
}

//@deprecated use background-image-retina mixin instead
@mixin background-image($url,$width: inherit,$height: inherit,$mobileHeight: null,$mobileWidth: null) {
    background: {
        image: url($url);
        repeat: no-repeat;
        position: center;
    }
    background-size: cover;
    display: inline-block;
    @include dimension($width, $height);

    @if $mobileHeight and $mobileWidth {
        @include responsive($mobile-width) {
            @include dimension($mobileHeight, $mobileWidth);
        }
    }
}

@mixin full-background-image($url) {
    background: url($url) no-repeat center center fixed;
    background-size: cover;
}

//cross browser
@mixin flex($value) {
    flex: $value;
}

@mixin justify-content($value) {
    justify-content: $value;
}

@mixin display-flex {
    display: flex;
}

@mixin align-items($value) {
    align-items: $value;
}

@mixin flex-grow($value) {
    flex-grow: $value;
}

@mixin flex-shrink($value) {
    flex-shrink: $value;
}

@mixin flex-direction($value) {
    display        : flex;
    flex-direction: $value;
}

@mixin flex-order($order) {
    order: $order;
}

@mixin flex-wrap($value) {
    flex-wrap: $value;
}

@mixin transition($value) {
    transition: $value;
}

@mixin box-shadow($value) {
    box-shadow: $value;
}

@mixin filter($value) {
    filter: $value;
}

@mixin background-cover {
    background-size: cover;
}

@mixin transform($value) {
    transform: $value;
}

@mixin backface-visibility($value) {
    backface-visibility: hidden;
}

@mixin perspective($value) {
    perspective: $value;
}

@mixin transform-style($value) {
    transform-style: $value;
}

@mixin transform-origin($value) {
    transform-origin: $value;
}

@mixin border-radius($radius) {
    border-radius: $radius;
}

@mixin border-bottom-radius($radius) {
    border-bottom-right-radius: $radius;
    border-bottom-left-radius: $radius;
}
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
}

//useful mixins
@mixin clearfix {
    &:after {
        content: " ";
        display: block;
        height: 0;
        clear: both;
    }
}

@mixin flex-middle {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align       : center;
}

@mixin flex-inline-middle {
    display: inline-flex;
    justify-content: center;
    align-items: center;
}

@mixin flex-with-alignment($horizontal,$vertical) {
    @include display-flex;
    @include justify-content($horizontal);
    @include align-items($vertical);
}

@mixin mask-image($url) {

    mask-image: url('#{$url}');
}

// retina

/* full background image with retina */
@mixin full-background-image-retina($imagePathWithoutExtension,$width,$height) {
    /*CSS for basic styling and non-retina image path:*/
    @include background-image('#{$imagePathWithoutExtension}.png', $width, $height);

    /*CSS for serving the retina image to devices with a high "device-pixel-ratio":*/
    @media only screen and (min-resolution: 1.5dppx) {
        @include background-image('#{$imagePathWithoutExtension}@2x.png', $width, $height);
    }
}

@mixin background-image-retina($url, $width: null, $height: null, $backgroundColor: null) {
    /*CSS for basic styling and non-retina image path:*/
    background-image: url('#{$url}.png');

    /*CSS for serving the retina image to devices with a high "device-pixel-ratio":*/
    @media only screen and (min-resolution: 1.5dppx) {
        background-image: url('#{$url}@2x.png');
    }

    @if $width and $height {
        background-size: $width $height;
    }

    @if $backgroundColor {
        background-color: $backgroundColor;
    }
}

@mixin svg-icon($url,$width,$height,$font-size: null,$bgColor: null) {
    width: $width;
    height: $height;
    display: inline-block;
    background-size: cover;
    background-repeat: no-repeat;
    @include mask-image("#{$imagePath}/svg/#{$url}");

    @if ($bgColor) {
        background-color: $bgColor;
    }

    @if ($font-size) {
        font-size: $font-size;
    }
}

//components
@mixin cloud-arrow($direction: up,$size: 10px,$color: $whiteBC1) {
    content: '';
    border: $size solid transparent;
    @if $direction == up {
        border-bottom-color: $color;
    }
    @if $direction == right {
        border-left-color: $color;
    }
    @if $direction == bottom {
        border-top-color: $color;
    }
    @if $direction == left {
        border-right-color: $color;
    }
    position: absolute;
    top: -20px;
    @content;
}

@mixin circle-icon-wrapper($diameter,$color) {
    @include dimension($diameter, $diameter);
    background: $color;
    border-radius: 50%;
    overflow: hidden;
    @include flex-middle;
}

@mixin format-input-placeholder($color, $opacity) {
    ::-webkit-input-placeholder {
        color: $color;
    }
    :-moz-placeholder {
        color: $color;
        opacity: $opacity;
    }
    ::-moz-placeholder {
        color: $color;
        opacity: $opacity;
    }
    :-ms-input-placeholder {
        color: $color;
    }
}
